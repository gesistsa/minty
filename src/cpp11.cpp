// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// CollectorGuess.cpp
std::string collectorGuess(const cpp11::strings& input, const cpp11::list& locale_, bool guessInteger);
extern "C" SEXP _minty_collectorGuess(SEXP input, SEXP locale_, SEXP guessInteger) {
  BEGIN_CPP11
    return cpp11::as_sexp(collectorGuess(cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(input), cpp11::as_cpp<cpp11::decay_t<const cpp11::list&>>(locale_), cpp11::as_cpp<cpp11::decay_t<bool>>(guessInteger)));
  END_CPP11
}
// parse.cpp
SEXP parse_vector_(const cpp11::strings& x, const cpp11::list& collectorSpec, const cpp11::list& locale_, const std::vector<std::string>& na, bool trim_ws);
extern "C" SEXP _minty_parse_vector_(SEXP x, SEXP collectorSpec, SEXP locale_, SEXP na, SEXP trim_ws) {
  BEGIN_CPP11
    return cpp11::as_sexp(parse_vector_(cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(x), cpp11::as_cpp<cpp11::decay_t<const cpp11::list&>>(collectorSpec), cpp11::as_cpp<cpp11::decay_t<const cpp11::list&>>(locale_), cpp11::as_cpp<cpp11::decay_t<const std::vector<std::string>&>>(na), cpp11::as_cpp<cpp11::decay_t<bool>>(trim_ws)));
  END_CPP11
}
// type_convert.cpp
cpp11::sexp type_convert_col(const cpp11::strings& x, const cpp11::list& spec, const cpp11::list& locale_, int col, const std::vector<std::string>& na, bool trim_ws);
extern "C" SEXP _minty_type_convert_col(SEXP x, SEXP spec, SEXP locale_, SEXP col, SEXP na, SEXP trim_ws) {
  BEGIN_CPP11
    return cpp11::as_sexp(type_convert_col(cpp11::as_cpp<cpp11::decay_t<const cpp11::strings&>>(x), cpp11::as_cpp<cpp11::decay_t<const cpp11::list&>>(spec), cpp11::as_cpp<cpp11::decay_t<const cpp11::list&>>(locale_), cpp11::as_cpp<cpp11::decay_t<int>>(col), cpp11::as_cpp<cpp11::decay_t<const std::vector<std::string>&>>(na), cpp11::as_cpp<cpp11::decay_t<bool>>(trim_ws)));
  END_CPP11
}
// type_convert.cpp
bool r_is_string_cpp11(const cpp11::sexp& x);
extern "C" SEXP _minty_r_is_string_cpp11(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(r_is_string_cpp11(cpp11::as_cpp<cpp11::decay_t<const cpp11::sexp&>>(x)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_minty_collectorGuess",    (DL_FUNC) &_minty_collectorGuess,    3},
    {"_minty_parse_vector_",     (DL_FUNC) &_minty_parse_vector_,     5},
    {"_minty_r_is_string_cpp11", (DL_FUNC) &_minty_r_is_string_cpp11, 1},
    {"_minty_type_convert_col",  (DL_FUNC) &_minty_type_convert_col,  6},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_minty(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
